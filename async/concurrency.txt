std::this_thread::yield
std::this_thread::get_id
std::this_thread::sleep_for
std::this_thread::sleep_until

async: may start or not

std::yield:
暂时不理会此线程


class future<>:
represents the outcome of an operation.
可以move 不能copy
future<>.get(): if not finished yet, blocked and get result
without calling get(), there is no guarantee that future<> will ever be called.

policy:
std::launch::async, may throw std::system_error (if not possible to async )

std::launch::async && std::launch::deferred
即使没有 future<>.get(), async 一定会执行， defer可能不执行

后台线程中抛异常：可以catch
future<>.get()只能调用1次，之后是UB

Waiting and Polling and future.get()

-- 强制启动线程 --
.get(): 只能1次
.wait(): 可以调用多次
-- 以下两个不返回std::future_status， 不强制启动线程 --
.wait_for(*): 至多等待 *
.wait_until(*): 等到时间点*

future_status::deferred 	The function to calculate the result has not been started yet
future_status::ready 	The result is ready (finished/returned)
future_status::timeout 	The timeout has expired 

shared_future:
.get()可以多次调用
可以copy

---

实现 1 个惰性求值


Class thread doesn’t have a launch policy.
The C++ standard library always tries to start the passed functionality in a new  thread.
If this  isn’t   possible, it throws a std::system_error with the error code resource_unavailable_try_again.

lifetime

std::terminate()
std::exception_ptr eptr;
std::current_exception();
rethrow_exception()


quick_exit: 不清除静态 全局对象， 保证detached thread 的访问
std::ref: 疑似返回 T& 和 const T&

std::thread::detach:
Separates the thread of execution from the thread object, allowing execution to continue independently. Any allocated resources will be freed once the thread exits. 
detached thread: 任由其执行，失去对其的控制，线程结束后资源自动回收，注意不要让detached thread access lifetime 已经过期的对象/资源，所以尽量不要传引用
总之，detached thread 很危险

Note that get() blocks until the shared state is ready:
block的意思是程序不会退出，还是连同其它线程一并阻塞？

set_value_at_thread_exit()
set_exception_at_thread_exit()

shared_state

---

18.4

In the C++11 standard, a data race is defined as “two conflicting actions in different threads, at least one of which is not atomic, and neither happens before the other.”

RAII principle (Resource Acquisition Is Initialization)
std::lock_guard





The C++ standard library permits the second attempt to throw a std::system_error with the error code resource_deadlock_would_occur if the platform detects such a deadlock.
But this is not required and is often not the case.
By using a recursive_mutex, this behavior is no problem.
This mutex allows multiple locks by the same thread and releases the lock when the last corresponding unlock() call is called:































